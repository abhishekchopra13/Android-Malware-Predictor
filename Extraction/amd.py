import xml.etree.ElementTree as ET
import pandas as pd
import os
import joblib
import sys
def remove(string): 
    return "".join(string.split()) 
#Checking the Command line format
if len(sys.argv) != 2:
	print("Incorrect Command format")
	exit(0)
#Default Permissions
print("Reading Default Permissions\n")
f = open("permlist.txt","r")
DefaultPerm = f.readlines()
print("Default permissions read\n")
#The following list l has permissions used by the app
l = list(DefaultPerm)
# This extracts permissions in xml file
print("Extracting features from ",str(sys.argv[1])," file\n")
os.system("androguard axml -o test.xml " + str(sys.argv[1]))
root = ET.parse("test.xml").getroot()
#Extracting Action and Permissions from the apk file
user_permission = root.findall("./uses-permission")
user_action = root.findall('./application/receiver/intent-filter/action')
permissions = user_permission + user_action

# # Initialising the dictionary hashmap
prefix1 = "android.permission."
hash_map = {}
for x in set(l):
    hash_map[x] = 0
for perm in permissions:
    for att in perm.attrib:
        to_str = str(perm.attrib[att])
        for it in l:
            if remove(it) == remove(to_str) or remove(prefix1+it) == remove(to_str):
                hash_map[it] = 1
        # print("{}\n".format(perm.attrib[att])) #Marking the permission found to be 1
df = pd.DataFrame([hash_map])
df = df.sort_index(axis = 1)
df.to_csv('Permcsvfile.csv', index=False, header = True)
print("Features Extracted data has been saved to Permcsvfile.csv\n")
filename = 'trained_model.sav'
loaded_model = joblib.load(filename)
new = df
isMalware = loaded_model.predict(new)
print('\n\n*****Ignore version warnings if any*****\n\n',str(sys.argv[1]),'file is : ')
if(isMalware == 1):
  print("Malware")
else:
  print("Benign")